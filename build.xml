<project name="javartm" basedir="." default="jar">

	<!-- Support for lower-casing a string.
		See http://stackoverflow.com/questions/7129672/uppercase-lowercase-capitalize-an-ant-property -->
	<scriptdef language="javascript" name="tolower">
		<attribute name="string"/><attribute name="toproperty"/>
		project.setProperty(attributes.get("toproperty"), attributes.get("string").toLowerCase());
	</scriptdef>
	<tolower string="${os.name}" toproperty="os.name.lower"/>

	<!-- Set timestamp -->
	<tstamp/>

	<!-- Project properties -->
	<property name="src.dir" value="src"/>
	<property name="java.src.dir" value="${src.dir}/java"/>
	<property name="c.src.dir" value="${src.dir}/c"/>

	<property name="build.dir" value="build"/>
	<property name="classes.dir" value="${build.dir}/classes"/>
	<property name="jni.dir" value="${build.dir}/jni"/>
	<property name="jnioutput.dir" value="${jni.dir}/javartm"/>
	<property name="jnilib.file" value="${jnioutput.dir}/javartm"/>

	<property name="jars.dir" value="lib"/>
	<property name="dist.dir" location="dist"/>
	<property name="dist.version" value="0.2-beta${DSTAMP}"/>

	<property name="jar.file" value="${dist.dir}/javartm-${dist.version}-${os.name.lower}-${os.arch}.jar"/>
	<property name="jarfat.file" value="${dist.dir}/javartm-fat-${dist.version}-${os.name.lower}-${os.arch}.jar"/>
	<property name="src-dist.file" value="${dist.dir}/javartm-${dist.version}-src.zip"/>

	<property name="antjars.dir" value="antlib"/>
	<property name="ant-contrib.file" value="${antjars.dir}/ant-contrib-1.0b5-SNAPSHOT.jar"/>
	<property name="ant-cpptasks.file" value="${antjars.dir}/ant-contrib-cpptasks-1.0~b5.jar"/>

	<!-- import ant-contrib -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath><pathelement location="${ant-contrib.file}"/></classpath>
	</taskdef>

	<!-- import ant-cpptasks -->
	<taskdef resource="cpptasks.tasks">
		<classpath><pathelement location="${ant-cpptasks.file}"/></classpath>
	</taskdef>

	<!-- platform conditions, used for conditional includes -->
	<condition property="isLinux">
		<os name="Linux"/>
	</condition>

	<path id="jars-classpath">
		<fileset dir="${jars.dir}" >
			<include name="*.jar"/>
		</fileset>
	</path>

	<target name="clean">
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
	</target>

	<target name="java-compile">
		<mkdir dir="${classes.dir}"/>
		<javac includeantruntime="false" srcdir="${java.src.dir}" destdir="${classes.dir}" debug="true" deprecation="true" debuglevel="lines,vars,source">
			<compilerarg value="-Xlint:unchecked"/>
			<classpath>
				<path refid="jars-classpath"/>
			</classpath>
		</javac>
	</target>

	<target name="jni-headers" depends="java-compile">
		<mkdir dir="${jni.dir}"/>
		<javah destdir="${jni.dir}">
			<classpath>
				<path path="${classes.dir}"/>
			</classpath>
			<class name="javartm.Transaction"/>
			<class name="javartm.CheckRtmSupport"/>
		</javah>
	</target>

	<target name="jni-compile-libcheckrtmsupport" depends="jni-headers">
		<mkdir dir="${jnioutput.dir}"/>
		<cc outtype="shared" subsystem="console" objdir="${jni.dir}" outfile="${jnioutput.dir}/checkrtmsupport">
			<compilerarg value="-Wall"/>
			<compilerarg value="-O2"/>
			<compilerarg value="-std=c99"/>
			<fileset dir="${c.src.dir}" includes="**/CheckRtmSupport.c"/>
			<includepath>
				<path path="${java.home}/../include"/>
				<path path="${jni.dir}"/>
			</includepath>
			<includepath if="isLinux">
				<path path="${java.home}/../include/linux"/>
			</includepath>
		</cc>
	</target>

	<target name="jni-compile-libjavartm-dummy" depends="jni-headers">
		<mkdir dir="${jnioutput.dir}"/>
		<cc outtype="shared" subsystem="console" objdir="${jni.dir}" outfile="${jnioutput.dir}/javartm-dummy">
			<compilerarg value="-Wall"/>
			<compilerarg value="-O2"/>
			<compilerarg value="-std=c99"/>
			<fileset dir="${c.src.dir}" includes="**/Transaction-dummy.c"/>
			<includepath>
				<path path="${java.home}/../include"/>
				<path path="${jni.dir}"/>
			</includepath>
			<includepath if="isLinux">
				<path path="${java.home}/../include/linux"/>
			</includepath>
		</cc>
	</target>

	<target name="jni-compile-libjavartm" depends="jni-headers">
		<mkdir dir="${jnioutput.dir}"/>
		<trycatch>
			<try>
				<!-- Try first to compile with gcc rtm intrinsics -->
				<cc outtype="shared" subsystem="console" objdir="${jni.dir}" outfile="${jnilib.file}">
					<compilerarg value="-Wall"/>
					<compilerarg value="-O2"/>
					<compilerarg value="-std=c99"/>
					<compilerarg value="-mrtm"/>
					<!-- we are going to be running on haswell at least, so why not take advantage of it -->
					<compilerarg value="-march=core-avx2"/>
					<fileset dir="${c.src.dir}"
						includes="**/*.c"
						excludes="**/CheckRtmSupport.c **/Transaction-dummy.c"/>
					<includepath>
						<path path="${java.home}/../include"/>
						<path path="${jni.dir}"/>
					</includepath>
					<includepath if="isLinux">
						<path path="${java.home}/../include/linux"/>
					</includepath>
				</cc>
			</try>
			<catch>
				<echo>Compile failed possibly due to -mrtm error, falling back to built-in rtm instrinsics</echo>
				<fail>FIXME: Built-in rtm instrinsics currently broken, sorry</fail>
				<trycatch>
					<try>
						<cc outtype="shared" subsystem="console" objdir="${jni.dir}" outfile="${jnilib.file}">
							<compilerarg value="-Wall"/>
							<compilerarg value="-std=gnu99"/>
							<compilerarg value="-O2"/>
							<!--
							-march=core-avx-i is a bit less recent than -march=core-avx2, for older compilers;
							see also http://gcc.gnu.org/onlinedocs/gcc/i386-and-x86_002d64-Options.html
							-->
							<compilerarg value="-march=core-avx-i"/>
							<defineset define="JAVARTM_RTM_INTRINSICS"/>
							<fileset dir="${c.src.dir}"
								includes="**/*.c"
								excludes="**/CheckRtmSupport.c **/Transaction-dummy.c"/>
							<includepath>
								<path path="${java.home}/../include"/>
								<path path="${jni.dir}"/>
							</includepath>
							<includepath if="isLinux">
								<path path="${java.home}/../include/linux"/>
							</includepath>
						</cc>
					</try>
					<catch>
						<echo>Compile failed possibly due to -march settings error, final try without explicit -march</echo>
						<cc outtype="shared" subsystem="console" objdir="${jni.dir}" outfile="${jnilib.file}">
							<compilerarg value="-Wall"/>
							<compilerarg value="-std=gnu99"/>
							<compilerarg value="-O2"/>
							<defineset define="JAVARTM_RTM_INTRINSICS"/>
							<fileset dir="${c.src.dir}"
								includes="**/*.c"
								excludes="**/CheckRtmSupport.c **/Transaction-dummy.c"/>
							<includepath>
								<path path="${java.home}/../include"/>
								<path path="${jni.dir}"/>
							</includepath>
							<includepath if="isLinux">
								<path path="${java.home}/../include/linux"/>
							</includepath>
						</cc>
					</catch>
				</trycatch>
			</catch>
		</trycatch>
	</target>

	<target name="jni-compile" depends="jni-compile-libcheckrtmsupport,jni-compile-libjavartm-dummy,jni-compile-libjavartm"/>

	<target name="build" depends="clean,java-compile,jni-compile" description="Builds javartm (java and native resources)"/>

	<target name="jar" depends="build" description="Generates the javartm jar">
		<mkdir dir="${dist.dir}"/>
		<jar destfile="${jar.file}">
			<manifest>
				<!-- Who is building this jar? -->
				<attribute name="Built-By" value="${user.name}"/>
				<!-- Information about the program itself -->
				<attribute name="Implementation-Vendor" value="javartm project"/>
				<attribute name="Implementation-Title" value="javartm"/>
				<attribute name="Implementation-Version" value="${dist.version}"/>
			</manifest>

			<fileset dir="${classes.dir}" excludes="**/*Test*.class"/>
			<fileset dir="${jni.dir}" includes="**/*.so"/>
		</jar>
	</target>

	<target name="fat-jar" depends="jar" description="Generates a fat javartm jar including all dependencies">
		<jar destfile="${jarfat.file}">
			<manifest>
				<!-- Who is building this jar? -->
				<attribute name="Built-By" value="${user.name}"/>
				<!-- Information about the program itself -->
				<attribute name="Implementation-Vendor" value="javartm project"/>
				<attribute name="Implementation-Title" value="javartm"/>
				<attribute name="Implementation-Version" value="${dist.version}"/>
			</manifest>

			<archives>
				<zips>
					<fileset dir="${jars.dir}" includes="**/*.jar"/>
					<fileset dir="${dist.dir}" includes="${jar.filename}"/>
				</zips>
			</archives>
		</jar>
	</target>

       <!-- Targets for running tests -->
	<target name="test-rtm" description="Runs RTM tests (requires hardware *WITH* RTM support)">
		<junit printsummary="yes" haltonfailure="yes">
			<formatter type="plain" usefile="false"/>
			<classpath>
				<path refid="jars-classpath"/>
				<path path="${classes.dir}"/>
			</classpath>
			<batchtest fork="yes">
				<fileset dir="${java.src.dir}">
					<include name="**/rtm/*Test*.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="test-nortm" description="Runs no-RTM tests (requires hardware *WITHOUT* RTM support)">
		<junit printsummary="yes" haltonfailure="yes">
			<formatter type="plain" usefile="false"/>
			<classpath>
				<path refid="jars-classpath"/>
				<path path="${classes.dir}"/>
			</classpath>
			<batchtest fork="yes">
				<fileset dir="${java.src.dir}">
					<include name="**/nortm/*Test*.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!-- Other targets -->
	<target name="src-dist" depends="clean" description="Builds a source distribution">
		<mkdir dir="${dist.dir}"/>
		<zip destfile="${src-dist.file}">
			<fileset dir="./">
				<exclude name="build/**"/>
				<exclude name="dist/**"/>
				<exclude name="sde-*.txt"/>
				<exclude name="hs_err_pid*.txt"/>
				<exclude name="pin-log.txt"/>
				<exclude name=".git/**"/>
			</fileset>
		</zip>
	</target>

	<target name="mvn-local-install" depends="jar" description="Deploys the javartm jar to local maven repository">
		<!-- TODO: Better alternative would be using https://maven.apache.org/ant-tasks/index.html -->
		<exec executable="mvn">
			<arg line="install:install-file -Dfile=${jar.file} -Dversion=${dist.version} -DgroupId=javartm -DartifactId=javartm -Dpackaging=jar"/>
		</exec>
	</target>

	<!-- aliases -->
	<target name="main" depends="build"/>
	<target name="compile" depends="build"/>
	<target name="clean-all" depends="clean"/>
	<target name="dist" depends="jar"/>
</project>
